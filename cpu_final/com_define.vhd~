--
--	Package File Template
--
--	Purpose: This package defines supplemental types, subtypes, 
--		 constants, and functions 
--
--   To use any of the example code shown below, uncomment the lines and modify as necessary
--

library IEEE;
use IEEE.STD_LOGIC_1164.all;

package com_define is

type INT2 is std_logic_vector(1 downto 0);
type INT3 is std_logic_vector(2 downto 0);
type INT4 is std_logic_vector(3 downto 0);
type INT5 is std_logic_vector(4 downto 0);
type INT6 is std_logic_vector(5 downto 0);
type INT7 is std_logic_vector(6 downto 0);
type INT8 is std_logic_vector(7 downto 0);
type INT9 is std_logic_vector(8 downto 0);
type INT10 is std_logic_vector(9 downto 0);
type INT11 is std_logic_vector(10 downto 0);
type INT12 is std_logic_vector(11 downto 0);
type INT13 is std_logic_vector(12 downto 0);
type INT14 is std_logic_vector(13 downto 0);
type INT15 is std_logic_vector(14 downto 0);
type INT16 is std_logic_vector(15 downto 0);
type INT17 is std_logic_vector(16 downto 0);
type INT18 is std_logic_vector(17 downto 0);
type INT19 is std_logic_vector(18 downto 0);
type INT20 is std_logic_vector(19 downto 0);
type INT21 is std_logic_vector(20 downto 0);
type INT22 is std_logic_vector(21 downto 0);
type INT23 is std_logic_vector(22 downto 0);
type INT24 is std_logic_vector(23 downto 0);
type INT25 is std_logic_vector(24 downto 0);
type INT26 is std_logic_vector(25 downto 0);
type INT27 is std_logic_vector(26 downto 0);
type INT28 is std_logic_vector(27 downto 0);
type INT29 is std_logic_vector(28 downto 0);
type INT30 is std_logic_vector(29 downto 0);
type INT31 is std_logic_vector(30 downto 0);
type INT32 is std_logic_vector(31 downto 0);

type REG_ADDR is std_logic_vector(4 downto 0);
type PHYSIC_RAM_ADDR is std_logic_vector(19 downto 0);

type PC_SELECT is std_logic_vector(2 downto 0);
constant PC_SELECT_PC :     std_logic_vector(2 downto 0) := "000";
constant PC_SELECT_NPC :    std_logic_vector(2 downto 0) := "001";
constant PC_SELECT_BRANCH : std_logic_vector(2 downto 0) := "010";
constant PC_SELECT_JUMP :   std_logic_vector(2 downto 0) := "011";
constant PC_SELECT_EXC :    std_logic_vector(2 downto 0) := "100";
constant PC_SELECT_ERET :   std_logic_vector(2 downto 0) := "101";

type ALU_OP is std_logic_vector(3 downto 0);
constant ALU_OP_DISABLE : std_logic_vector(3 downto 0) := "0000";
constant ALU_OP_ADD :     std_logic_vector(3 downto 0) := "0001";
constant ALU_OP_CMP :     std_logic_vector(3 downto 0) := "0010";
constant ALU_OP_CMPU :    std_logic_vector(3 downto 0) := "0011";
constant ALU_OP_SUBU :    std_logic_vector(3 downto 0) := "0100";
constant ALU_OP_SRCA :    std_logic_vector(3 downto 0) := "0101";
constant ALU_OP_AND :     std_logic_vector(3 downto 0) := "0110";
constant ALU_OP_NOR :     std_logic_vector(3 downto 0) := "0111";
constant ALU_OP_OR :      std_logic_vector(3 downto 0) := "1000";
constant ALU_OP_XOR :     std_logic_vector(3 downto 0) := "1001";
constant ALU_OP_SLL :     std_logic_vector(3 downto 0) := "1010";
constant ALU_OP_SRA :     std_logic_vector(3 downto 0) := "1011";
constant ALU_OP_SRL :     std_logic_vector(3 downto 0) := "1100";
constant ALU_OP_MULT :    std_logic_vector(3 downto 0) := "1101";
constant ALU_OP_TO_LO :   std_logic_vector(3 downto 0) := "1110";
constant ALU_OP_TO_HI :   std_logic_vector(3 downto 0) := "1111";

type ALU_SELECT is std_logic_vector(3 downto 0);
constant ALU_SELECT_ZERO			 : std_logic_vector(2 downto 0) := "000";
constant ALU_SELECT_RS				 : std_logic_vector(2 downto 0) := "001";
constant ALU_SELECT_RT				 : std_logic_vector(2 downto 0) := "010";
constant ALU_SELECT_LO				 : std_logic_vector(2 downto 0) := "011";
constant ALU_SELECT_HI				 : std_logic_vector(2 downto 0) := "100";
constant ALU_SELECT_IMME_SIGN_EXTEND : std_logic_vector(2 downto 0) := "101";
constant ALU_SELECT_IMME_ZERO_EXTEND : std_logic_vector(2 downto 0) := "110";
constant ALU_SELECT_EIGHT 			 : std_logic_vector(2 downto 0) := "111";

type MEM_SELECT is std_logic_vector(1 downto 0);
constant MEM_SELECT_DISABLE			 : std_logic_vector(1 downto 0) := "00";
constant MEM_SELECT_FROM_RS 		 : std_logic_vector(1 downto 0) := "01";
constant MEM_SELECT_FROM_RS_BYTE 	 : std_logic_vector(1 downto 0) := "10";

type ALIEN_TYPE is std_logic_vector(1 downto 0);
constant ALIEN_BYTE : std_logic_vector(1 downto 0) := "01";
constant ALIEN_WORD : std_logic_vector(1 downto 0) := "10";
constant ALIEN_QUAD : std_logic_vector(1 downto 0) := "11";

type WB_SELECT is std_logic_vector(2 downto 0);
constant WB_SELECT_DISABLE					 : std_logic_vector(2 downto 0) := "000";
constant WB_SELECT_FROM_RS					 : std_logic_vector(2 downto 0) := "001";
constant WB_SELECT_FROM_ALU					 : std_logic_vector(2 downto 0) := "010";
constant WB_SELECT_FROM_RPC					 : std_logic_vector(2 downto 0) := "011";
constant WB_SELECT_FROM_MEM					 : std_logic_vector(2 downto 0) := "100";
constant WB_SELECT_FROM_MEMBYTE_SIGN_EXTEND  : std_logic_vector(2 downto 0) := "101";
constant WB_SELECT_FROM_MEMBYTE_ZERO_EXTEND  : std_logic_vector(2 downto 0) := "110";
constant WB_SELECT_FROM_MEMINT16_ZERO_EXTEND : std_logic_vector(2 downto 0) := "111";

type PHY_MEM_STATE is std_logic_vector(2 downto 0);
constant PHY_MEM_STATE_DISABLE : 	std_logic_vector(2 downto 0) := "000";
constant PHY_MEM_STATE_READ_RAM :   std_logic_vector(2 downto 0) := "001";
constant PHY_MEM_STATE_WRITE_RAM :  std_logic_vector(2 downto 0) := "010";
constant PHY_MEM_STATE_READ_FLASH1: std_logic_vector(2 downto 0) := "011";
constant PHY_MEM_STATE_READ_FLASH2: std_logic_vector(2 downto 0) := "100";
constant PHY_MEM_STATE_READ_SERIAL: std_logic_vector(2 downto 0) := "101";
constant PHY_MEM_STATE_WRITE_SERIAL:std_logic_vector(2 downto 0) := "110";

constant TLB_ENTRY_WIDTH :	integer := 63;
constant TLB_NUM_ENTRY : integer := 16;
constant TLB_INDEX_WIDTH : integer := 4;
constant TLB_WRITE_STRUCT_WIDTH : integer := TLB_ENTRY_WIDTH + TLB_INDEX_WIDTH;

constant VIRTUAL_SERIAL_DATA : std_logic_vector(31 downto 0) := x"bFD003F8";
constant VIRTUAL_SERIAL_STATUS : std_logic_vector(31 downto 0) := x"bFD003FC";
constant PHYSICAL_SERIAL_DATA : std_logic_vector(31 downto 0) := x"1FD003F8";
constant PHYSICAL_SERIAL_STATUS : std_logic_vector(31 downto 0) := x"1FD003FC";

constant NO_MEM_EXC : std_logic_vector(2 downto 0) := "000";
constant TLB_MODIFIED : std_logic_vector(2 downto 0) := "001";
constant TLB_L : std_logic_vector(2 downto 0) := "010";
constant TLB_S : std_logic_vector(2 downto 0) := "011";
constant ADE_L : std_logic_vector(2 downto 0) := "100";
constant ADE_S : std_logic_vector(2 downto 0) := "101";

constant ALIGN_QUAD : std_logic_vector(1 downto 0) := "00";
constant ALIGN_WORD : std_logic_vector(1 downto 0) := "01";
constant ALIGN_BYTE : std_logic_vector(1 downto 0) := "10";

constant INVALID_CONTENT : std_logic_vector(31 downto 0) := x"FFFFFFFF";

-- type <new_type> is
--  record
--    <type_name>        : std_logic_vector( 7 downto 0);
--    <type_name>        : std_logic;
-- end record;
--
-- Declare constants
--
-- constant <constant_name>		: time := <time_unit> ns;
-- constant <constant_name>		: integer := <value;
--
-- Declare functions and procedure
--
-- function <function_name>  (signal <signal_name> : in <type_declaration>) return <type_declaration>;
-- procedure <procedure_name> (<type_declaration> <constant_name>	: in <type_declaration>);
--

end common;

package body com_define is

---- Example 1
--  function <function_name>  (signal <signal_name> : in <type_declaration>  ) return <type_declaration> is
--    variable <variable_name>     : <type_declaration>;
--  begin
--    <variable_name> := <signal_name> xor <signal_name>;
--    return <variable_name>; 
--  end <function_name>;

---- Example 2
--  function <function_name>  (signal <signal_name> : in <type_declaration>;
--                         signal <signal_name>   : in <type_declaration>  ) return <type_declaration> is
--  begin
--    if (<signal_name> = '1') then
--      return <signal_name>;
--    else
--      return 'Z';
--    end if;
--  end <function_name>;

---- Procedure Example
--  procedure <procedure_name>  (<type_declaration> <constant_name>  : in <type_declaration>) is
--    
--  begin
--    
--  end <procedure_name>;
 
end common;
