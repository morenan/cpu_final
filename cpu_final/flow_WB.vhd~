library IEEE; 
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_SIGNED.ALL;
use work.com_define.ALL;

entity flow_WB is
	port(
		clk, rst, pause, clear : in std_logic;
		status : in INT3;
		
		in_pc : in INT32 ;
		in_rd_en, in_lo_en, in_hi_en : in std_logic ;
		in_rd_value, in_lo_value, in_hi_value : in INT32 ;
		in_rd_addr : in REG_ADDR ;
		in_rd_type : in std_logic ;
		
		-- with reg_com
		reg_rd_en, reg_lo_en, reg_hi_en : out std_logic ;
		reg_rd_value, reg_lo_value, reg_hi_value : out std_logic ;
		reg_rd_addr : out REG_ADDR ;
		-- with reg_cp0
		cp0_rd_en : out std_logic ;
		cp0_rd_addr : out REG_ADDR ;
		cp0_rd_value : out INT32
		
		);
end flow_WB ;

architecture bhv of flow_WB is

signal s_pc : INT32;

begin
	
	process(rst, clk)
	begin
		if rst = '0' then
			s_pc <= ADDR_ZERO_VALUE;
		elsif clk'event and clk = '1' and status = "000" and pause = '0' then
			if clear = '1' then
				s_pc <= ADDR_ZERO_VALUE;
			else
				s_pc <= in_pc;
			end if;
		end if;
	end process;
	
	-- with reg_com
	reg_rd_en <= in_rd_en when in_rd_type = '0'
			else '0';
	reg_lo_en <= in_lo_en;
	reg_hi_en <= in_hi_en;
	reg_rd_value <= in_rd_value;
	reg_lo_value <= in_lo_value;
	reg_hi_value <= in_hi_value;
	reg_rd_addr <= in_rd_addr;
	
	-- with cp0_com
	cp0_rd_en <= in_rd_en when in_rd_type = '1'
			else '0';
	cp0_rd_addr <= in_rd_addr;
	cp0_rd_value <= in_rd_value;
	
end bhv;
	
	




